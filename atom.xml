<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sebastian's Blog]]></title>
  <link href="http://sporto.github.com/atom.xml" rel="self"/>
  <link href="http://sporto.github.com/"/>
  <updated>2012-12-05T21:47:12+11:00</updated>
  <id>http://sporto.github.com/</id>
  <author>
    <name><![CDATA[Sebastian Porto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pattern for Service Objects in Rails]]></title>
    <link href="http://sporto.github.com/blog/2012/12/05/service-pattern-rails/"/>
    <updated>2012-12-05T12:43:00+11:00</updated>
    <id>http://sporto.github.com/blog/2012/12/05/service-pattern-rails</id>
    <content type="html"><![CDATA[<p>Service Objects in Rails allows to neatly separate the business logic of your application in reausable components. This post describes our implementation of this pattern.</p>

<p>We went through the usual story, we started by putting some business logic in controllers and some in models, then decided that all this logic should go in the models and ended up with very fat models tightly coupled to each other.</p>

<p>So when looking for alternatives patterns for organising the business logic I came across the idea of having separated objects to handle this business logic. Somewhere I saw this pattern labeled as &#8216;Service objects&#8217; (SO). This was way before this very interesting post <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></p>

<p>The discussions often involved the Single Responsibility Principle (SLP), so most of the examples shown a class with only one public method on it. At first I totally dismissed this as a kind of functional pattern that didn&#8217;t fit into the OOP world of Ruby.</p>

<p>But my pain with the fat models made me look into this again. So I decided to give it a try. Since then I have grown very fond of this approach because of the following:</p>

<ul>
<li>As this objects have little code they are easy to reason about</li>
<li>They are very easy to compose (use one inside the other)</li>
<li>They encapsulate the business logic neatly, so you never has to repeat the same logic in different places</li>
<li>They use dependency injection (DI) heavily so they are loosely couple with the rest of the application</li>
<li>Using DI makes it very easy to swap the dependencies in testing</li>
<li>But still they have sensible dependency defaults, I don&#8217;t see the point in injecting dependencies all the time when in 90% of the cases you just need the defaults</li>
</ul>


<p>Let me show the pattern we are using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FindInvoicesForClientService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">invoices</span> <span class="o">=</span> <span class="n">find_invoices_service</span><span class="o">.</span><span class="p">(</span><span class="n">some_args</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_invoices_service</span>
</span><span class='line'>      <span class="vi">@find_invoices_service</span> <span class="o">||=</span> <span class="no">FindInvoicesService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_invoices_service</span><span class="o">=</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@find_invoices_service</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="o">=</span> <span class="no">FindInvoicesForClientService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in test we just swap the dependencies</span>
</span><span class='line'><span class="n">collaborator</span> <span class="o">=</span> <span class="n">double</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'><span class="n">collaborator</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">invoices</span><span class="p">)</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="n">find_invoices_service</span> <span class="o">=</span> <span class="n">collaborator</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key points in our version are:</p>

<ul>
<li>the class has only one public method (call)</li>
<li>dependencies are only passed if needed, the class has some sensible defaults that will be used 90% of the time</li>
<li>each dependency injector has its own method instead of a attr_accessor, this is so you can prepare the dependencies if needed</li>
</ul>


<p>This has been a great pattern for us, we have hundreds of these objects that can be easily composed as needed. This pattern has made our code seriously easier to work with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMD, is not one or the other]]></title>
    <link href="http://sporto.github.com/blog/2012/12/05/amd/"/>
    <updated>2012-12-05T12:43:00+11:00</updated>
    <id>http://sporto.github.com/blog/2012/12/05/amd</id>
    <content type="html"><![CDATA[<p>I am starting to see a pattern in many JS libraries where they are trying to detect the presence of AMD an act accordingly. I think it is great that AMD is getting so much attention but they usual way this is done has a big issue: <strong>It shouldn’t be one or the other.</strong></p>

<p>The pattern usually goes like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">…</span> <span class="nx">define</span> <span class="nx">as</span> <span class="nx">AMD</span> <span class="nx">module</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">…</span> <span class="nx">attach</span> <span class="nx">as</span> <span class="nx">global</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem with this is that if the script is loaded using a common script tag and a AMD loaded (e.g. require) is also present, then it won’t be possible to use the library in the normal way (using the global variable).</p>

<p>You might think that if require is there we should load everything using it, but we have good reasons not to do this. We concatentate and minifiy the most important parts of our JS code, the rest is loaded using require on demand.</p>

<p>So the better way to do this is by attaching the library in many ways as possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="c1">// CommonJS module is defined</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Register as a named module with AMD.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">define</span><span class="p">(</span><span class="err">‘</span><span class="nx">foo</span><span class="err">’</span><span class="p">,</span> <span class="p">[],</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Integrate with $ if defined</span>
</span><span class='line'>  <span class="c1">// or create our own underscore object.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">foo</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embracing Async with Deferreds and Promises]]></title>
    <link href="http://sporto.github.com/blog/2012/09/22/embracing-async-with-deferreds/"/>
    <updated>2012-09-22T00:00:00+10:00</updated>
    <id>http://sporto.github.com/blog/2012/09/22/embracing-async-with-deferreds</id>
    <content type="html"><![CDATA[<p>Deferred and promises are a very powerful tool for handling asynchronous events. In this blog post I will explain what they are and when to use them.</p>

<h2>Let&#8217;s create gretting cards</h2>

<p>As an example let’s say that we are building a UI for a greeting cards making application. Our UI may look something like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image01.png"></p>

<p>The user can select an animation, select the music and then click next. Our event flow will look like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image02.png"></p>

<p>In this first case we know everything we need from the beginning. When the user clicks &#8216;next&#8217; we know which animation and which music to load. After we are done loading these assets we will show the greeting card. To do this is code we have several options:</p>

<h3>We can count the assets already loaded:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assetsToLoad</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">assetsToLoad</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">assetsToLoad</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span> <span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">anim</span><span class="p">);</span>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">music</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code simply keeps a count of assets loaded and when all are loaded it shows the card.</p>

<h3>We can use a library like <a href="https://github.com/caolan/async">Async</a>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
</span><span class='line'>  <span class="nx">loadAnim</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">loadMusic</span><span class="p">,</span>
</span><span class='line'><span class="p">],</span> <span class="nx">show</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simply tell the library that we want to load these two assets in parallel and then call &#8216;show&#8217; when done. The library takes care of all the details for us. A library like this is great but we need to know everything that we need to load at the start.</p>

<h2>Not knowing everything from the beginning</h2>

<p>Now let’s imagine that we don’t want a ‘Next’ button anymore in our UI:</p>

<p><img src="http://sporto.github.com/images/deferreds/image04.png"></p>

<p>Here we just want to show the greeting card automatically after the user has selected the animation and the music. Maybe not the best user experience but it works for our example. We don&#8217;t know the order in which the user will select the assets.</p>

<p>If we want to stick with the previous way of doing thing (knowing everything at the start). Our event flow will looks something like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image05.png"></p>

<p>In the above flow we are waiting idle while the user is busy selecting the music. We don&#8217;t want this, we want to take advantage of this time to load the assets the user has already chosen. So our event flow should look more like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image06.png"></p>

<p>In this flow we start loading the animation as soon as the user has selected it. While the user is busy selecting the music the animation is loading in the background. As soon as the user select the music we start loading it too in paralell.</p>

<p>A library like as Async is not useful in this case anymore. We can however still count like before or we could use conditional like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onVideoLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">checkIfAllLoaded</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onMusicLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">checkIfAllLoaded</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">checkIfAllLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">videoLoaded</span> <span class="o">&amp;&amp;</span> <span class="nx">musicLoaded</span> <span class="o">&amp;&amp;</span> <span class="err">…</span> <span class="p">)</span> <span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works but it is not very elegant and becomes hard to maintain quickly.</p>

<h2>Deferreds to the rescue</h2>

<p>Here is where Deferreds shine. But let me explain what they are first. In a nutshell a Deferred is contract for an event that will happen in the future. Easier to explain this with some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// we create a Deferred</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we add a listener to the Deferred</span>
</span><span class='line'><span class="c1">// when the Deferred is done then do something</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//… do something</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… later</span>
</span><span class='line'><span class="c1">// we mark the Deferred as done</span>
</span><span class='line'><span class="c1">// this will trigger the listener added above</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create an Deferred object that accepts listeners like ‘done’. At some point in our application we set this deferreds as done (‘resolve’). This will trigger all the listeners.</p>

<p>There are many Deferred implementations like jQuery (1.5+), <a href="https://github.com/wookiehangover/underscore.deferred">underscore deferreds</a>, <a href="https://github.com/kriszyp/promised-io">promised-IO</a>. My examples are using jQuery but the concepts are pretty much the same for all of them.</p>

<h2>Aggregation</h2>

<p>A deferred can also be aggregated (I will explain promises later):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// We create two deferreds</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We combine them together using the ‘when’ function. </span>
</span><span class='line'><span class="c1">// This creates a new object (Promise) that is the aggregation of the two Deferreds. </span>
</span><span class='line'><span class="c1">// We add a listener ‘done’ to the aggregated Promise.</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">def1</span><span class="p">,</span> <span class="nx">def2</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//… do something with one and two;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… later</span>
</span><span class='line'><span class="nx">def1</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… even later</span>
</span><span class='line'><span class="nx">def2</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case when def1 and def2 are resolved the listener in the combined Promise will trigger.</p>

<p>So going back to our greeting cards example. To do this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image06.png"></p>

<p>We can simply code it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">musicDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musicDef</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>  
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//when the music is loaded</span>
</span><span class='line'><span class="nx">musicDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//when the animation is loaded</span>
</span><span class='line'><span class="nx">animDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>No conditions, no counting. Quite elegant if you ask me.</p>

<h2>What if it is already resolved?</h2>

<p>Deferreds have another neat trick. Let&#8217;s say that the user selects the music first and it completely loads before we even start loading the animation.</p>

<p><img src="http://sporto.github.com/images/deferreds/image07.png"></p>

<p>By the time we add our aggregated listener the Deferred for the music has already been resolved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">musicDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…later</span>
</span><span class='line'><span class="nx">musicDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…even later</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musicDef</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>  
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>No problems! The aggregated listener will still triggers, it knows that the Deferred is already resolved and acts as expected. This is something you cannot with common event listeners!</p>

<h2>Fail and reject</h2>

<p>Deferred can also be rejected as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">def</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do something</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//fallback</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…later, something bad happened</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a way of handling errors and providing fallbacks.</p>

<h2>Promises</h2>

<p>A promise is mostly like a Deferred but it doesn’t provide the methods to resolve and reject it. This is useful when you want to give a reference to the Deferred to another object so it can add listeners but you don&#8217;t want to give that object the power to resolve the Deferred.</p>

<p>Let&#8217;s say you have a caller object with code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create a loader object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Loader</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ask the loader to load something</span>
</span><span class='line'><span class="c1">// it receives a promise back</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="err">…</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add listeners to the promise</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span><span class="k">do</span> <span class="nx">something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This caller receives a Promise from the loader object, it can add listeners to the Promise or aggregate it with other Promises. But it cannot resolve or reject them. Trying to do something like:</p>

<pre><code>promise.resolve();
</code></pre>

<p>will fail.</p>

<p>The code in the loader object will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">load</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">def</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">// it returns the promise</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..later</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the def.promise() method which creates the promise. The jQuery ajax methods does exactly this, it gives you a promise back when called.</p>

<p>You can combine promises to you heart content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musDef</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">msgDef</span><span class="p">,</span> <span class="nx">bgDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">promise1</span><span class="p">,</span> <span class="nx">promise2</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//… do something with anim, music message and background</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using Deferreds you can easily code something like this. Where you have many actions happening at the same time, each without a clear start and ending and depending on each other.</p>

<p><img src="http://sporto.github.com/images/deferreds/image08.png"></p>

<h2>Conclusion</h2>

<p>In conclusion Deferreds are best suited in situations where:</p>

<ul>
<li>You have several actions happening at the same time e.g. loaders</li>
<li>You don’t know where the action starts and when it finishes e.g. user interaction</li>
<li>You have other actions that depend on the completion of multiple other actions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with Backbone, Ember and CanJS]]></title>
    <link href="http://sporto.github.com/blog/2012/08/18/backbone-ember-canjs/"/>
    <updated>2012-08-18T00:00:00+10:00</updated>
    <id>http://sporto.github.com/blog/2012/08/18/backbone-ember-canjs</id>
    <content type="html"><![CDATA[<p>Before coming to the JavaScript world I was doing Flex development, so I was quite familiar with MVC paradigm in the front-end side of applications.</p>

<p>When I first started using JavaScript I learnt to do things in the usual way of that time - which is having the DOM as the source of truth. e.g. We will add elements to the DOM and if we wanted to know the length of a collection we will just use jQuery to ask the DOM for how many elements there were.</p>

<p>I soon grew tired of this way of doing things, it was just messy.</p>

<h2>Backbone</h2>

<p><a href="http://backbonejs.org/">Backbone</a> captured a lot of attention when it came up, it was the first MVC framework that looked easy to get into. So I decided to try it. It was a great start, the structure of my code started to resemble a lot more what I was used to in Flex e.g. collections, views, controllers.</p>

<p>But there were many times where I would think &#8220;What? Do I need to do this myself? Shouldn&#8217;t Backbone take care of this?&#8221;. For example when a collection changed the view needed to know and I had to hook all these events myself.</p>

<p>Another thing that was a let down is that there is no build-in way of doing live binding in the views. You have to do this yourself e.g. re-render a view manually when something changes (via events). Also doing nested views was more complex that it needed to be.</p>

<p>Backbone just left me wanting a lot more from an MVC framework. So I decided that Backbone was not my cup of tea, it wasn&#8217;t really doing enough useful things for me.</p>

<h2>Ember</h2>

<p><a href="http://emberjs.com/">Ember</a> also came up with quite a hype and it looked like the perfect fit for everything I was expecting. It has live binding, a great object model and an excellent template engine.</p>

<p>It takes a while to learn as it deviates quite a bit from the usual way of doing JavaScript, Ember relies heavily on binding instead of events. I got a lot into it, even did a talk about it in my local user group.</p>

<p>I liked it but I wasn&#8217;t completely happy with it because:</p>

<ul>
<li>It is huge, totally overkill for small projects or mobile apps.</li>
<li>Performance wise it is not that good either, quite slow compared to Backbone. <a href="http://jsfiddle.net/jashkenas/CGSd5/">http://jsfiddle.net/jashkenas/CGSd5/</a></li>
<li>It is hard to debug, when something fails it gives you very obscure error messages that are hard to track back to the source.</li>
<li>It adds scripts tags around elements, which breaks CSS styling in some cases.</li>
<li>It required me to declare lots of small components, so for simple things I ended up with too many objects.</li>
<li>It also force me to declare objects in the global space, I couldn&#8217;t find a way of not having to do this.</li>
</ul>


<h2>CanJS</h2>

<p>Then came <a href="http://canjs.us/">CanJS</a> (without the hype of the other two), it is a reboot of the venerable JavascriptMVC project. Bitovi has done a great job at making JavascriptMVC a lot more accessible to newcomers.</p>

<p>CanJS looked intriguing, so I decided to use it in my next project. It was a great success for me. It stroked a great balance between Backbone and Ember. The features I like a lot in CanJS are:</p>

<ul>
<li>It is quite small, just a bit bigger than Backbone. Tiny compared to Ember.</li>
<li>It is fast (as fast as Backbone). <a href="http://jsfiddle.net/sporto/Ek9am/">http://jsfiddle.net/sporto/Ek9am/</a></li>
<li>It has live binding out of the box, and they work perfectly well (although I prefer handlebars, I can live with EJS).</li>
<li>It is a lot more general purpose than Backbone and Ember. For example CanJS has an observable object that can be used in a huge variety of situations, not just when doing MVC.</li>
</ul>


<p>CanJS has become my MVC library of choice. I really recommend you give it a go in your next project.</p>

<h2>The future</h2>

<p>I am planning to keep using CanJS in the future, but <a href="http://www.angularjs.org/">Angular</a> looks very appealing, I really like the declarative way of doing things directly in html without having to use templates. I am planning to give Angular a go soon.</p>
]]></content>
  </entry>
  
</feed>
